#!/bin/sh /etc/rc.common
# Copyright (c) 2021-2022 plan44.ch/luz
START=99

boot() {

  # system information vars
  PRODUCT_MODEL="KKS-DCM"
  PRODUCT_COPYRIGHT_HOLDER="astrol.ch"
  PRODUCT_MODEL_DESCRIPTION="modbus SPI controller"
  PRODUCT_WEBADMIN_USER="kksdcm"
  MAC=$(ip link | sed -n -E -e '/eth0/{n;s/.*ether *([0-9a-fA-F:]*).*$/\1/;s/://g;p;}')
  UNIT_HOSTNAME="kksdcm-$MAC"

  echo "[kksdcm] preparing for runit"

  # softlink all runit supervise dirs to /var/run
  PREV=$(pwd)
  cd /etc/service
  SERVICES=*
  mkdir -v -p /var/run/runit
  for SERV in ${SERVICES}; do
    # create softlink if not yet existing
    if [ ! -h /etc/service/${SERV}/supervise ]; then
      rm -v -r /etc/service/${SERV}/supervise
      ln -v -s -f /var/run/runit/supervise.${SERV} /etc/service/${SERV}/supervise
    fi
    # check for log
    if [ -d /etc/service/${SERV}/log ]; then
      # create softlink if not yet existing
      if [ ! -h /etc/service/${SERV}/log/supervise ]; then
        rm -v -r /etc/service/${SERV}/log/supervise
        ln -v -s -f /var/run/runit/supervise.${SERV}.log /etc/service/${SERV}/log/supervise
      fi
    fi
  done
  cd ${PREV}

  # make sure we have a ubus login
  USERINDEX=0
  while WEBUSER=$(uci get rpcd.@login[${USERINDEX}].username); do
    if [ "${WEBUSER}" = "${PRODUCT_WEBADMIN_USER}" ]; then
      # already exists
      break;
    fi
    WEBUSER=""
    USERINDEX=$((${USERINDEX}+1))
  done
  if [ -z "${WEBUSER}" ]; then
    # need new default login
    ID=$(uci add rpcd login)
    uci -q set rpcd.${ID}.username="${PRODUCT_WEBADMIN_USER}"
    uci -q set rpcd.${ID}.password=$(uhttpd -m ${PRODUCT_WEBADMIN_USER})
    uci -q add_list rpcd.${ID}.read="webadmin"
    uci -q add_list rpcd.${ID}.write="webadmin"
    uci commit rpcd
  fi

  # update u2pnpd UPnP announcement details
  # - uuid gets defined automatically by u2pnpd's uci defaults script
  uci -q set u2pnpd.@u2pnpd[0].manufacturer="${PRODUCT_COPYRIGHT_HOLDER}"
  #uci -q set u2pnpd.@u2pnpd[0].manufacturerURL="${PRODUCT_INFORMATION_PAGE_LINK}"
  uci -q set u2pnpd.@u2pnpd[0].modelDescription="${PRODUCT_MODEL_DESCRIPTION}"
  uci -q set u2pnpd.@u2pnpd[0].modelName="${PRODUCT_MODEL}"
  uci -q set u2pnpd.@u2pnpd[0].modelNumber="${PRODUCT_MODEL}"
  uci -q set u2pnpd.@u2pnpd[0].modelName="${PRODUCT_MODEL}"
  #uci -q set u2pnpd.@u2pnpd[0].modelURL="${PRODUCT_INFORMATION_PAGE_LINK}"
  #uci -q set u2pnpd.@u2pnpd[0].serialNumber="${UNIT_SERIALNO}"
  uci commit u2pnpd



  # KKS-DCM Hardware setup

  # - i2s pinmux group
  #   GPIO0 = SW_SPI_ENABLE - set to 1 to enable SW_SPI_NCS0 and SW_SPI_MOSI
  #   GPIO2 = DRV_EN - must be 0 (and NDRV_EN 1) to disable drivers, 1 always enables driver
  #   GPIO3 = NDRV_EN - must be 1 (and NDRV_EN 0) to disable drivers, 0 always enables driver
  # - uart0 pinmux group
  #   GPIO12/UART_TXD0 = SW_SPI_NCS0 (gated via GPIO0/SW_SPI_ENABLE)
  #   GPIO13/UART_RXD0 = SW_SPI_CLK
  # - uart1 pinmux group
  #   GPIO45/UART_TXD1 = SW_SPI_MOSI (gated via GPIO0/SW_SPI_ENABLE)
  #   GPIO46/UART_RXD1 = SW_SPI_MISO
  # - i2c pinmux group
  #   GPIO4 = SW_SPI_NCS1
  #   GPIO5 = SW_SPI_IRQ

  # setup enable lines
  omega2-ctrl gpiomux set i2s gpio
  echo 2 >/sys/class/gpio/export; echo out >/sys/class/gpio/gpio2/direction;
  echo 3 >/sys/class/gpio/export; echo out >/sys/class/gpio/gpio3/direction;
  echo 0 >/sys/class/gpio/export; echo out >/sys/class/gpio/gpio0/direction;
  # - start with disabled drivers...
  echo 0 >/sys/class/gpio/gpio2/value
  echo 1 >/sys/class/gpio/gpio3/value
  # - ..and disabled SPI gate
  echo 0 >/sys/class/gpio/gpio0/value

  # install software SPI for US-Gen with two CS lines, IRQ separate at GPIO5 (app can use it with edge trigger)
  # - gpio muxes
  omega2-ctrl gpiomux set uart0 gpio # disables console, NCS0 and CLK
  omega2-ctrl gpiomux set uart1 gpio # MISO and MOSI
  omega2-ctrl gpiomux set i2c gpio # NCS1 and IRQ
  # - kernel module
  #   Syntax: insmod spi-gpio-custom busBusNum=deviceId,sckGPIO,mosiGPIO,misoGPIO,mode0,speedInHz0[,cs0_GPIO[,mode1,speedInHz1,cs1_GPIO[,mode2....]]]
  #   Note: current implementation of spi-gpio.c does not care about the speed, but just runs at max which is ~1.2MHz on MT7688.
  # - modeX parameter:
  #   SPI_CPHA        0x01   // clock phase
  #   SPI_CPOL        0x02   // clock polarity
  #   SPI_CS_HIGH     0x04   // chipselect active high?
  #   SPI_LSB_FIRST   0x08   // per-word bits-on-wire
  #   SPI_3WIRE       0x10   // SI/SO signals shared
  #   SPI_LOOP        0x20   // loopback mode
  #   SPI_NO_CS       0x40   // 1 dev/bus, no chipselect
  #   SPI_READY       0x80   // slave pulls low to pause
  #   SPI_TX_DUAL     0x100  // transmit with 2 wires
  #   SPI_TX_QUAD     0x200  // transmit with 4 wires
  #   SPI_RX_DUAL     0x400  // receive with 2 wires
  #   SPI_RX_QUAD     0x800  // receive with 4 wires
  # - device 1, SCK=GPIO13, MOSI=GPIO45, MISO=GPIO46, mode0=SPI_CS_HIGH, 1Mbit, CS0=GPIO12, mode1=SPI_CS_HIGH, 1Mbit, CS1=GPIO4
  insmod spi-gpio-custom bus0=1,13,45,46,4,1000000,12,4,1000000,4
  # - enable SPI gate
  echo 1 >/sys/class/gpio/gpio0/value
  # - enable drivers
  echo 1 >/sys/class/gpio/gpio2/value

  # make sure no dhcp services (v4, v6) or RA are running at all
  # - in case a dhcp section exists for lan
  uci -q set dhcp.lan.dhcpv4=disabled
  uci -q set dhcp.lan.dhcpv6=disabled
  uci -q set dhcp.lan.ra=disabled
  uci -q set dhcp.lan.ignore=1
  # - in case a dhcp section exists for wlan
  uci -q set dhcp.wlan.dhcpv4=disabled
  uci -q set dhcp.wlan.dhcpv6=disabled
  uci -q set dhcp.wlan.ra=disabled
  uci -q set dhcp.wlan.ignore=1
  uci commit dhcp

  # update host name
  if [ "$(uci get system.@system[0].hostname)" != "${UNIT_HOSTNAME}" ]; then
    uci -q set system.@system[0].hostname="${UNIT_HOSTNAME}"
    uci commit system
    # make sure it applies immediately
    /etc/init.d/system reload
    /etc/init.d/avahi-daemon restart
  fi

  # start runit
  /sbin/runsvdir-start &

  # start u2pnpd which for some reason does not autostart (or terminates)
  /etc/init.d/u2pnpd start

}
